"""
Enhanced Weather GUI with Student Pack Features
Modern, comprehensive weather application showcasing all OpenWeatherMap Student Pack capabilities.

Features:
- Current weather with detailed metrics
- 4-day hourly forecasts
- 16-day daily forecasts  
- Interactive weather maps (15 layers)
- Air pollution monitoring
- Historical weather data (1 year archive)
- Statistical analysis
- Geocoding with search
- Accumulated parameters
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
from datetime import datetime, timedelta
import webbrowser
from enhanced_weather_api import EnhancedWeatherAPI
from config import Config

class StudentPackWeatherGUI:
    def __init__(self, root):
        self.root = root
        self.weather_api = EnhancedWeatherAPI()
        
        # State variables
        self.current_location = None
        self.current_weather_data = None
        self.forecast_data = None
        
        self.setup_window()
        self.setup_styles()
        self.create_widgets()
        self.load_default_location()
        
    def setup_window(self):
        """Configure the main window."""
        self.root.title("Student Pack Weather Dashboard - OpenWeatherMap")
        self.root.geometry("1200x800")
        self.root.minsize(800, 600)
        self.root.configure(bg='#0f1419')
        
        # Make window responsive
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        
    def setup_styles(self):
        """Configure modern styling."""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Define color scheme
        colors = {
            'bg_dark': '#0f1419',
            'bg_medium': '#1e2328',
            'bg_light': '#2d3136',
            'accent': '#00d4ff',
            'success': '#00ff9f',
            'warning': '#ffb700',
            'error': '#ff6b6b',
            'text_light': '#ffffff',
            'text_medium': '#c9d1d9',
            'text_dark': '#8b949e'
        }
        
        # Configure styles
        self.style.configure('Title.TLabel', 
                           background=colors['bg_dark'], 
                           foreground=colors['accent'],
                           font=('Segoe UI', 18, 'bold'))
        
        self.style.configure('Header.TLabel', 
                           background=colors['bg_medium'], 
                           foreground=colors['text_light'],
                           font=('Segoe UI', 12, 'bold'))
        
        self.style.configure('Data.TLabel', 
                           background=colors['bg_medium'], 
                           foreground=colors['text_medium'],
                           font=('Segoe UI', 10))
        
        self.style.configure('Success.TLabel', 
                           background=colors['bg_medium'], 
                           foreground=colors['success'],
                           font=('Segoe UI', 10, 'bold'))
        
        self.style.configure('Custom.TFrame', 
                           background=colors['bg_medium'],
                           relief='flat',
                           borderwidth=1)
        
        self.style.configure('Card.TFrame', 
                           background=colors['bg_light'],
                           relief='solid',
                           borderwidth=1)
        
    def create_widgets(self):
        """Create the main GUI layout."""
        # Main container
        main_container = ttk.Frame(self.root, style='Custom.TFrame')
        main_container.grid(row=0, column=0, sticky='nsew', padx=5, pady=5)
        main_container.grid_rowconfigure(1, weight=1)
        main_container.grid_columnconfigure(0, weight=1)
        
        # Header section
        self.create_header(main_container)
        
        # Create notebook for tabs
        self.create_notebook(main_container)
        
        # Status bar
        self.create_status_bar(main_container)
        
    def create_header(self, parent):
        """Create the header section with title and search."""
        header_frame = ttk.Frame(parent, style='Custom.TFrame')
        header_frame.grid(row=0, column=0, sticky='ew', pady=(0, 10))
        header_frame.grid_columnconfigure(1, weight=1)
        
        # Title
        title_label = ttk.Label(header_frame, 
                               text="üéì Student Pack Weather Dashboard", 
                               style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=3, pady=5)
        
        # Search section
        search_frame = ttk.Frame(header_frame, style='Custom.TFrame')
        search_frame.grid(row=1, column=0, columnspan=3, sticky='ew', pady=5)
        search_frame.grid_columnconfigure(1, weight=1)
        
        ttk.Label(search_frame, text="üìç Location:", style='Header.TLabel').grid(row=0, column=0, padx=(0, 5))
        
        self.location_var = tk.StringVar(value=Config.DEFAULT_CITY)
        self.location_entry = ttk.Entry(search_frame, textvariable=self.location_var, width=30)
        self.location_entry.grid(row=0, column=1, padx=5, sticky='ew')        self.location_entry.bind('<Return>', self.search_location)
        
        search_btn = ttk.Button(search_frame, text="üîç Search", command=self.search_location)
        search_btn.grid(row=0, column=2, padx=5)
        
        # Subscription info
        api_info = self.weather_api.get_api_usage_info()
        sub_text = (f"Plan: {api_info['subscription']['subscription_plan']} | "
                   f"Rate: {api_info['rate_limits']['current_forecast']} | "
                   f"Free for Education")
        
        sub_label = ttk.Label(search_frame, text=sub_text, style='Success.TLabel')
        sub_label.grid(row=1, column=0, columnspan=3, pady=5)
        
    def create_notebook(self, parent):
        """Create tabbed interface for different features."""
        self.notebook = ttk.Notebook(parent)
        self.notebook.grid(row=1, column=0, sticky='nsew', padx=5, pady=5)
        
        # Tab 1: Current Weather & Forecasts
        self.create_current_tab()
        
        # Tab 2: Historical Data
        self.create_historical_tab()
        
        # Tab 3: Air Pollution
        self.create_pollution_tab()
        
        # Tab 4: Weather Maps
        self.create_maps_tab()
        
        # Tab 5: Statistics & Analysis
        self.create_statistics_tab()\n        \n    def create_current_tab(self):\n        \"\"\"Create current weather and forecast tab.\"\"\"\n        current_frame = ttk.Frame(self.notebook, style='Custom.TFrame')\n        self.notebook.add(current_frame, text='üå§Ô∏è Current & Forecasts')\n        \n        # Create scrollable canvas\n        canvas = tk.Canvas(current_frame, bg='#1e2328', highlightthickness=0)\n        scrollbar = ttk.Scrollbar(current_frame, orient='vertical', command=canvas.yview)\n        scrollable_frame = ttk.Frame(canvas, style='Custom.TFrame')\n        \n        scrollable_frame.bind(\n            '<Configure>',\n            lambda e: canvas.configure(scrollregion=canvas.bbox('all'))\n        )\n        \n        canvas.create_window((0, 0), window=scrollable_frame, anchor='nw')\n        canvas.configure(yscrollcommand=scrollbar.set)\n        \n        canvas.grid(row=0, column=0, sticky='nsew')\n        scrollbar.grid(row=0, column=1, sticky='ns')\n        \n        current_frame.grid_rowconfigure(0, weight=1)\n        current_frame.grid_columnconfigure(0, weight=1)\n        \n        # Current weather section\n        self.create_current_weather_section(scrollable_frame)\n        \n        # Forecast sections\n        self.create_hourly_forecast_section(scrollable_frame)\n        self.create_daily_forecast_section(scrollable_frame)\n        \n    def create_current_weather_section(self, parent):\n        \"\"\"Create current weather display.\"\"\"\n        current_card = ttk.LabelFrame(parent, text='üìä Current Weather', style='Card.TFrame')\n        current_card.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        parent.grid_columnconfigure(0, weight=1)\n        \n        # Current weather data display\n        self.current_weather_frame = ttk.Frame(current_card, style='Card.TFrame')\n        self.current_weather_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        current_card.grid_columnconfigure(0, weight=1)\n        \n        # Placeholder text\n        self.current_weather_label = ttk.Label(self.current_weather_frame, \n                                             text=\"Loading current weather...\", \n                                             style='Data.TLabel')\n        self.current_weather_label.grid(row=0, column=0, pady=10)\n        \n    def create_hourly_forecast_section(self, parent):\n        \"\"\"Create hourly forecast section (4 days).\"\"\"\n        hourly_card = ttk.LabelFrame(parent, text='‚è∞ Hourly Forecast (4 Days - 96 Hours)', style='Card.TFrame')\n        hourly_card.grid(row=1, column=0, sticky='ew', padx=10, pady=10)\n        \n        # Hourly forecast display\n        self.hourly_frame = ttk.Frame(hourly_card, style='Card.TFrame')\n        self.hourly_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        hourly_card.grid_columnconfigure(0, weight=1)\n        \n        # Create horizontal scrollable frame for hourly data\n        hourly_canvas = tk.Canvas(self.hourly_frame, height=150, bg='#2d3136', highlightthickness=0)\n        h_scrollbar = ttk.Scrollbar(self.hourly_frame, orient='horizontal', command=hourly_canvas.xview)\n        self.hourly_content = ttk.Frame(hourly_canvas, style='Card.TFrame')\n        \n        self.hourly_content.bind(\n            '<Configure>',\n            lambda e: hourly_canvas.configure(scrollregion=hourly_canvas.bbox('all'))\n        )\n        \n        hourly_canvas.create_window((0, 0), window=self.hourly_content, anchor='nw')\n        hourly_canvas.configure(xscrollcommand=h_scrollbar.set)\n        \n        hourly_canvas.grid(row=0, column=0, sticky='ew')\n        h_scrollbar.grid(row=1, column=0, sticky='ew')\n        \n        self.hourly_frame.grid_columnconfigure(0, weight=1)\n        \n    def create_daily_forecast_section(self, parent):\n        \"\"\"Create daily forecast section (16 days).\"\"\"\n        daily_card = ttk.LabelFrame(parent, text='üìÖ Daily Forecast (16 Days)', style='Card.TFrame')\n        daily_card.grid(row=2, column=0, sticky='ew', padx=10, pady=10)\n        \n        # Daily forecast display\n        self.daily_frame = ttk.Frame(daily_card, style='Card.TFrame')\n        self.daily_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        daily_card.grid_columnconfigure(0, weight=1)\n        \n    def create_historical_tab(self):\n        \"\"\"Create historical weather data tab.\"\"\"\n        historical_frame = ttk.Frame(self.notebook, style='Custom.TFrame')\n        self.notebook.add(historical_frame, text='üìö Historical (1 Year)')\n        \n        # Historical data controls\n        controls_frame = ttk.LabelFrame(historical_frame, text='üîç Historical Data Search', style='Card.TFrame')\n        controls_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        historical_frame.grid_columnconfigure(0, weight=1)\n        \n        # Date selection\n        ttk.Label(controls_frame, text=\"üìÖ Select Date:\", style='Header.TLabel').grid(row=0, column=0, padx=5, pady=5)\n        \n        self.hist_date_var = tk.StringVar(value=(datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'))\n        hist_date_entry = ttk.Entry(controls_frame, textvariable=self.hist_date_var, width=15)\n        hist_date_entry.grid(row=0, column=1, padx=5, pady=5)\n        \n        hist_btn = ttk.Button(controls_frame, text=\"üìä Get Historical Data\", command=self.get_historical_data)\n        hist_btn.grid(row=0, column=2, padx=5, pady=5)\n        \n        # Historical data display\n        self.historical_display = ttk.Frame(historical_frame, style='Card.TFrame')\n        self.historical_display.grid(row=1, column=0, sticky='nsew', padx=10, pady=10)\n        historical_frame.grid_rowconfigure(1, weight=1)\n        \n    def create_pollution_tab(self):\n        \"\"\"Create air pollution monitoring tab.\"\"\"\n        pollution_frame = ttk.Frame(self.notebook, style='Custom.TFrame')\n        self.notebook.add(pollution_frame, text='üå¨Ô∏è Air Quality')\n        \n        # Current air quality\n        current_aqi_frame = ttk.LabelFrame(pollution_frame, text='üå¨Ô∏è Current Air Quality', style='Card.TFrame')\n        current_aqi_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        pollution_frame.grid_columnconfigure(0, weight=1)\n        \n        self.aqi_display = ttk.Frame(current_aqi_frame, style='Card.TFrame')\n        self.aqi_display.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        current_aqi_frame.grid_columnconfigure(0, weight=1)\n        \n        # Air quality forecast\n        forecast_aqi_frame = ttk.LabelFrame(pollution_frame, text='üìä Air Quality Forecast', style='Card.TFrame')\n        forecast_aqi_frame.grid(row=1, column=0, sticky='nsew', padx=10, pady=10)\n        pollution_frame.grid_rowconfigure(1, weight=1)\n        \n        self.aqi_forecast_display = ttk.Frame(forecast_aqi_frame, style='Card.TFrame')\n        self.aqi_forecast_display.grid(row=0, column=0, sticky='nsew', padx=10, pady=10)\n        forecast_aqi_frame.grid_columnconfigure(0, weight=1)\n        forecast_aqi_frame.grid_rowconfigure(0, weight=1)\n        \n    def create_maps_tab(self):\n        \"\"\"Create weather maps tab.\"\"\"\n        maps_frame = ttk.Frame(self.notebook, style='Custom.TFrame')\n        self.notebook.add(maps_frame, text='üó∫Ô∏è Weather Maps (15 Layers)')\n        \n        # Map layer selection\n        layer_frame = ttk.LabelFrame(maps_frame, text='üé® Map Layers', style='Card.TFrame')\n        layer_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        maps_frame.grid_columnconfigure(0, weight=1)\n        \n        # Available layers\n        layers = self.weather_api.get_available_map_layers()\n        self.selected_layer = tk.StringVar(value=layers[0] if layers else 'temp_new')\n        \n        ttk.Label(layer_frame, text=\"üåà Select Layer:\", style='Header.TLabel').grid(row=0, column=0, padx=5, pady=5)\n        \n        layer_combo = ttk.Combobox(layer_frame, textvariable=self.selected_layer, values=layers, state='readonly')\n        layer_combo.grid(row=0, column=1, padx=5, pady=5)\n        \n        map_btn = ttk.Button(layer_frame, text=\"üåç Open Interactive Map\", command=self.open_weather_map)\n        map_btn.grid(row=0, column=2, padx=5, pady=5)\n        \n        # Map information\n        map_info_frame = ttk.Frame(maps_frame, style='Card.TFrame')\n        map_info_frame.grid(row=1, column=0, sticky='nsew', padx=10, pady=10)\n        maps_frame.grid_rowconfigure(1, weight=1)\n        \n        map_info_text = (\n            \"üó∫Ô∏è Weather Maps Features:\\n\\n\"\n            \"‚úÖ 15 Different Weather Layers\\n\"\n            \"üå°Ô∏è Temperature maps\\n\"\n            \"‚òî Precipitation radar\\n\"\n            \"üí® Wind speed & direction\\n\"\n            \"‚òÅÔ∏è Cloud coverage\\n\"\n            \"üìä Atmospheric pressure\\n\"\n            \"üõ∞Ô∏è Satellite imagery\\n\"\n            \"üìà Historical, Current & Forecast\\n\\n\"\n            \"üéì Student Pack includes full access to all layers!\"\n        )\n        \n        info_label = ttk.Label(map_info_frame, text=map_info_text, style='Data.TLabel', justify='left')\n        info_label.grid(row=0, column=0, padx=10, pady=10, sticky='nw')\n        \n    def create_statistics_tab(self):\n        \"\"\"Create statistics and analysis tab.\"\"\"\n        stats_frame = ttk.Frame(self.notebook, style='Custom.TFrame')\n        self.notebook.add(stats_frame, text='üìä Statistics & Analysis')\n        \n        # Statistical analysis controls\n        analysis_frame = ttk.LabelFrame(stats_frame, text='üìà Statistical Analysis', style='Card.TFrame')\n        analysis_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)\n        stats_frame.grid_columnconfigure(0, weight=1)\n        \n        # Date range selection\n        ttk.Label(analysis_frame, text=\"üìÖ Analysis Period:\", style='Header.TLabel').grid(row=0, column=0, padx=5, pady=5)\n        \n        self.stats_start_var = tk.StringVar(value=(datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'))\n        self.stats_end_var = tk.StringVar(value=(datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d'))\n        \n        ttk.Entry(analysis_frame, textvariable=self.stats_start_var, width=12).grid(row=0, column=1, padx=2, pady=5)\n        ttk.Label(analysis_frame, text=\"to\", style='Data.TLabel').grid(row=0, column=2, padx=2, pady=5)\n        ttk.Entry(analysis_frame, textvariable=self.stats_end_var, width=12).grid(row=0, column=3, padx=2, pady=5)\n        \n        stats_btn = ttk.Button(analysis_frame, text=\"üìä Generate Statistics\", command=self.generate_statistics)\n        stats_btn.grid(row=0, column=4, padx=5, pady=5)\n        \n        # Accumulated parameters\n        accum_frame = ttk.LabelFrame(stats_frame, text='üßÆ Accumulated Parameters', style='Card.TFrame')\n        accum_frame.grid(row=1, column=0, sticky='ew', padx=10, pady=10)\n        \n        # Temperature threshold\n        ttk.Label(accum_frame, text=\"üå°Ô∏è Temperature Threshold (¬∞C):\", style='Header.TLabel').grid(row=0, column=0, padx=5, pady=5)\n        self.temp_threshold_var = tk.StringVar(value=\"15.0\")\n        ttk.Entry(accum_frame, textvariable=self.temp_threshold_var, width=10).grid(row=0, column=1, padx=5, pady=5)\n        \n        # Precipitation threshold  \n        ttk.Label(accum_frame, text=\"üíß Precipitation Threshold (mm):\", style='Header.TLabel').grid(row=0, column=2, padx=5, pady=5)\n        self.precip_threshold_var = tk.StringVar(value=\"0.1\")\n        ttk.Entry(accum_frame, textvariable=self.precip_threshold_var, width=10).grid(row=0, column=3, padx=5, pady=5)\n        \n        accum_btn = ttk.Button(accum_frame, text=\"üßÆ Calculate Accumulation\", command=self.calculate_accumulation)\n        accum_btn.grid(row=0, column=4, padx=5, pady=5)\n        \n        # Results display\n        self.stats_display = ttk.Frame(stats_frame, style='Card.TFrame')\n        self.stats_display.grid(row=2, column=0, sticky='nsew', padx=10, pady=10)\n        stats_frame.grid_rowconfigure(2, weight=1)\n        \n    def create_status_bar(self, parent):\n        \"\"\"Create status bar.\"\"\"\n        self.status_frame = ttk.Frame(parent, style='Custom.TFrame')\n        self.status_frame.grid(row=2, column=0, sticky='ew', pady=(5, 0))\n        \n        self.status_var = tk.StringVar(value=\"Ready - Student Pack Weather Dashboard\")\n        self.status_label = ttk.Label(self.status_frame, textvariable=self.status_var, style='Data.TLabel')\n        self.status_label.grid(row=0, column=0, sticky='w', padx=5)\n        \n        # API info\n        api_info_btn = ttk.Button(self.status_frame, text=\"‚ÑπÔ∏è API Info\", command=self.show_api_info)\n        api_info_btn.grid(row=0, column=1, sticky='e', padx=5)\n        \n        self.status_frame.grid_columnconfigure(0, weight=1)\n        \n    def update_status(self, message):\n        \"\"\"Update status bar message.\"\"\"\n        self.status_var.set(f\"{datetime.now().strftime('%H:%M:%S')} - {message}\")\n        self.root.update_idletasks()\n        \n    def load_default_location(self):\n        \"\"\"Load weather data for default location.\"\"\"\n        self.search_location()\n        \n    def search_location(self, event=None):\n        \"\"\"Search for location and load weather data.\"\"\"\n        location_name = self.location_var.get().strip()\n        if not location_name:\n            return\n            \n        self.update_status(f\"Searching for {location_name}...\")\n        \n        def search_thread():\n            try:\n                # Geocode the location\n                locations = self.weather_api.geocode_city(location_name, limit=1)\n                if not locations:\n                    self.root.after(0, lambda: messagebox.showerror(\"Error\", f\"Location '{location_name}' not found.\"))\n                    return\n                    \n                location = locations[0]\n                self.current_location = {\n                    'name': location.get('name', location_name),\n                    'country': location.get('country', ''),\n                    'lat': location['lat'],\n                    'lon': location['lon']\n                }\n                \n                # Load all weather data\n                self.root.after(0, self.load_weather_data)\n                \n            except Exception as e:\n                self.root.after(0, lambda: messagebox.showerror(\"Error\", f\"Failed to search location: {e}\"))\n                self.root.after(0, lambda: self.update_status(\"Ready\"))\n                \n        threading.Thread(target=search_thread, daemon=True).start()\n        \n    def load_weather_data(self):\n        \"\"\"Load comprehensive weather data for current location.\"\"\"\n        if not self.current_location:\n            return\n            \n        lat = self.current_location['lat']\n        lon = self.current_location['lon']\n        location_name = f\"{self.current_location['name']}, {self.current_location['country']}\"\n        \n        self.update_status(f\"Loading weather data for {location_name}...\")\n        \n        def load_thread():\n            try:\n                # Load current weather\n                current_weather = self.weather_api.get_current_weather_by_coordinates(lat, lon)\n                self.current_weather_data = self.weather_api.format_weather_data(current_weather)\n                self.root.after(0, self.update_current_weather_display)\n                \n                # Load hourly forecast\n                hourly_forecast = self.weather_api.get_hourly_forecast_4days(lat, lon)\n                self.forecast_data = self.weather_api.format_forecast_data(hourly_forecast)\n                self.root.after(0, self.update_hourly_forecast_display)\n                self.root.after(0, self.update_daily_forecast_display)\n                \n                # Load air pollution\n                air_pollution = self.weather_api.get_air_pollution_current(lat, lon)\n                self.root.after(0, lambda: self.update_air_quality_display(air_pollution))\n                \n                self.root.after(0, lambda: self.update_status(f\"Weather data loaded for {location_name}\"))\n                \n            except Exception as e:\n                self.root.after(0, lambda: messagebox.showerror(\"Error\", f\"Failed to load weather data: {e}\"))\n                self.root.after(0, lambda: self.update_status(\"Ready\"))\n                \n        threading.Thread(target=load_thread, daemon=True).start()\n        \n    def update_current_weather_display(self):\n        \"\"\"Update current weather display.\"\"\"\n        if not self.current_weather_data:\n            return\n            \n        # Clear existing display\n        for widget in self.current_weather_frame.winfo_children():\n            widget.destroy()\n            \n        data = self.current_weather_data\n        location_name = f\"{data['city']}, {data['country']}\"\n        \n        # Main weather info\n        main_frame = ttk.Frame(self.current_weather_frame, style='Card.TFrame')\n        main_frame.grid(row=0, column=0, sticky='ew', pady=5)\n        self.current_weather_frame.grid_columnconfigure(0, weight=1)\n        \n        # Location and time\n        ttk.Label(main_frame, text=f\"üìç {location_name}\", style='Header.TLabel').grid(row=0, column=0, columnspan=2, pady=5)\n        ttk.Label(main_frame, text=f\"üïê {datetime.now().strftime('%Y-%m-%d %H:%M')}\", style='Data.TLabel').grid(row=1, column=0, columnspan=2, pady=2)\n        \n        # Temperature and conditions\n        temp_frame = ttk.Frame(main_frame, style='Card.TFrame')\n        temp_frame.grid(row=2, column=0, columnspan=2, pady=10)\n        \n        ttk.Label(temp_frame, text=f\"{data['temperature']:.1f}¬∞C\", \n                 font=('Segoe UI', 24, 'bold'), style='Success.TLabel').grid(row=0, column=0, padx=10)\n        ttk.Label(temp_frame, text=f\"Feels like {data['feels_like']:.1f}¬∞C\", \n                 style='Data.TLabel').grid(row=1, column=0, padx=10)\n        ttk.Label(temp_frame, text=f\"üå§Ô∏è {data['description']}\", \n                 font=('Segoe UI', 14), style='Header.TLabel').grid(row=0, column=1, rowspan=2, padx=20)\n        \n        # Additional details\n        details_frame = ttk.Frame(main_frame, style='Card.TFrame')\n        details_frame.grid(row=3, column=0, columnspan=2, pady=10, sticky='ew')\n        main_frame.grid_columnconfigure(0, weight=1)\n        main_frame.grid_columnconfigure(1, weight=1)\n        \n        details = [\n            (\"üíß Humidity\", f\"{data['humidity']}%\"),\n            (\"üìä Pressure\", f\"{data['pressure']} hPa\"),\n            (\"üí® Wind\", f\"{data['wind_speed']} m/s\"),\n            (\"üëÅÔ∏è Visibility\", f\"{data['visibility']/1000:.1f} km\" if data['visibility'] != 'N/A' else 'N/A')\n        ]\n        \n        for i, (label, value) in enumerate(details):\n            row = i // 2\n            col = i % 2\n            detail_frame = ttk.Frame(details_frame, style='Card.TFrame')\n            detail_frame.grid(row=row, column=col, padx=10, pady=5, sticky='w')\n            ttk.Label(detail_frame, text=label, style='Header.TLabel').grid(row=0, column=0)\n            ttk.Label(detail_frame, text=value, style='Data.TLabel').grid(row=0, column=1, padx=(5, 0))\n            \n    def update_hourly_forecast_display(self):\n        \"\"\"Update hourly forecast display.\"\"\"\n        if not self.forecast_data or not self.forecast_data['hourly']:\n            return\n            \n        # Clear existing display\n        for widget in self.hourly_content.winfo_children():\n            widget.destroy()\n            \n        hourly_data = self.forecast_data['hourly'][:24]  # Show next 24 hours\n        \n        for i, hour_data in enumerate(hourly_data):\n            if not hour_data.get('timestamp'):\n                continue\n                \n            hour_frame = ttk.Frame(self.hourly_content, style='Card.TFrame', relief='solid', borderwidth=1)\n            hour_frame.grid(row=0, column=i, padx=2, pady=5, sticky='nsew')\n            \n            # Time\n            hour_time = datetime.fromtimestamp(hour_data['timestamp'])\n            time_str = hour_time.strftime('%H:%M')\n            if i == 0:\n                time_str = \"Now\"\n            elif hour_time.hour == 0:\n                time_str = hour_time.strftime('%m/%d')\n                \n            ttk.Label(hour_frame, text=time_str, style='Header.TLabel').grid(row=0, column=0, padx=5, pady=2)\n            \n            # Temperature\n            temp = hour_data.get('temperature', 'N/A')\n            ttk.Label(hour_frame, text=f\"{temp:.0f}¬∞C\" if temp != 'N/A' else 'N/A', \n                     style='Data.TLabel').grid(row=1, column=0, padx=5, pady=2)\n            \n            # Weather condition\n            weather = hour_data.get('weather', {})\n            desc = weather.get('description', 'N/A')[:10] + ('...' if len(weather.get('description', '')) > 10 else '')\n            ttk.Label(hour_frame, text=desc, style='Data.TLabel', width=12).grid(row=2, column=0, padx=5, pady=2)\n            \n            # Precipitation probability\n            pop = hour_data.get('pop', 0) * 100\n            ttk.Label(hour_frame, text=f\"‚òî {pop:.0f}%\", style='Data.TLabel').grid(row=3, column=0, padx=5, pady=2)\n            \n    def update_daily_forecast_display(self):\n        \"\"\"Update daily forecast display.\"\"\"\n        if not self.forecast_data or not self.forecast_data['daily']:\n            return\n            \n        # Clear existing display\n        for widget in self.daily_frame.winfo_children():\n            widget.destroy()\n            \n        daily_data = self.forecast_data['daily'][:7]  # Show next 7 days\n        \n        for i, day_data in enumerate(daily_data):\n            if not day_data.get('timestamp'):\n                continue\n                \n            day_frame = ttk.Frame(self.daily_frame, style='Card.TFrame', relief='solid', borderwidth=1)\n            day_frame.grid(row=i//4, column=i%4, padx=5, pady=5, sticky='ew')\n            self.daily_frame.grid_columnconfigure(i%4, weight=1)\n            \n            # Date\n            day_time = datetime.fromtimestamp(day_data['timestamp'])\n            date_str = day_time.strftime('%a %m/%d')\n            if i == 0:\n                date_str = \"Today\"\n            elif i == 1:\n                date_str = \"Tomorrow\"\n                \n            ttk.Label(day_frame, text=date_str, style='Header.TLabel').grid(row=0, column=0, columnspan=2, pady=2)\n            \n            # Temperature range\n            temp_data = day_data.get('temperature', {})\n            temp_min = temp_data.get('min', 'N/A')\n            temp_max = temp_data.get('max', 'N/A')\n            \n            if temp_min != 'N/A' and temp_max != 'N/A':\n                temp_str = f\"{temp_max:.0f}¬∞ / {temp_min:.0f}¬∞\"\n            else:\n                temp_str = \"N/A\"\n                \n            ttk.Label(day_frame, text=temp_str, style='Data.TLabel').grid(row=1, column=0, columnspan=2, pady=2)\n            \n            # Weather condition\n            weather = day_data.get('weather', {})\n            desc = weather.get('description', 'N/A')\n            ttk.Label(day_frame, text=desc, style='Data.TLabel').grid(row=2, column=0, columnspan=2, pady=2)\n            \n            # Precipitation\n            pop = day_data.get('pop', 0) * 100\n            ttk.Label(day_frame, text=f\"‚òî {pop:.0f}%\", style='Data.TLabel').grid(row=3, column=0, pady=2)\n            \n            # UV Index\n            uv = day_data.get('uv_index', 'N/A')\n            uv_str = f\"‚òÄÔ∏è {uv:.0f}\" if uv != 'N/A' else \"‚òÄÔ∏è N/A\"\n            ttk.Label(day_frame, text=uv_str, style='Data.TLabel').grid(row=3, column=1, pady=2)\n            \n    def update_air_quality_display(self, air_data):\n        \"\"\"Update air quality display.\"\"\"\n        # Clear existing display\n        for widget in self.aqi_display.winfo_children():\n            widget.destroy()\n            \n        if not air_data or 'list' not in air_data or not air_data['list']:\n            ttk.Label(self.aqi_display, text=\"No air quality data available\", style='Data.TLabel').grid(row=0, column=0)\n            return\n            \n        aqi_data = air_data['list'][0]\n        aqi = aqi_data['main']['aqi']\n        components = aqi_data.get('components', {})\n        \n        aqi_levels = {1: \"Good\", 2: \"Fair\", 3: \"Moderate\", 4: \"Poor\", 5: \"Very Poor\"}\n        aqi_colors = {1: \"#00ff9f\", 2: \"#ffb700\", 3: \"#ff8c00\", 4: \"#ff6b6b\", 5: \"#ff0000\"}\n        \n        # AQI Level\n        aqi_frame = ttk.Frame(self.aqi_display, style='Card.TFrame')\n        aqi_frame.grid(row=0, column=0, sticky='ew', pady=5)\n        self.aqi_display.grid_columnconfigure(0, weight=1)\n        \n        ttk.Label(aqi_frame, text=f\"Air Quality Index: {aqi}/5\", style='Header.TLabel').grid(row=0, column=0)\n        ttk.Label(aqi_frame, text=f\"Status: {aqi_levels.get(aqi, 'Unknown')}\", style='Data.TLabel').grid(row=1, column=0)\n        \n        # Components\n        if components:\n            comp_frame = ttk.Frame(self.aqi_display, style='Card.TFrame')\n            comp_frame.grid(row=1, column=0, sticky='ew', pady=5)\n            \n            ttk.Label(comp_frame, text=\"Pollutant Concentrations (Œºg/m¬≥):\", style='Header.TLabel').grid(row=0, column=0, columnspan=2, pady=5)\n            \n            row = 1\n            for component, value in components.items():\n                ttk.Label(comp_frame, text=f\"{component.upper()}:\", style='Data.TLabel').grid(row=row, column=0, sticky='w', padx=5)\n                ttk.Label(comp_frame, text=f\"{value:.2f}\", style='Data.TLabel').grid(row=row, column=1, sticky='w', padx=5)\n                row += 1\n                \n    def get_historical_data(self):\n        \"\"\"Get historical weather data.\"\"\"\n        if not self.current_location:\n            messagebox.showerror(\"Error\", \"Please select a location first.\")\n            return\n            \n        try:\n            date_str = self.hist_date_var.get()\n            target_date = datetime.strptime(date_str, '%Y-%m-%d')\n            \n            # Check if date is within 1 year limit\n            one_year_ago = datetime.now() - timedelta(days=365)\n            if target_date < one_year_ago:\n                messagebox.showerror(\"Error\", \"Date is beyond 1 year archive limit.\")\n                return\n                \n            self.update_status(f\"Loading historical data for {date_str}...\")\n            \n            def load_historical():\n                try:\n                    lat = self.current_location['lat']\n                    lon = self.current_location['lon']\n                    \n                    historical_data = self.weather_api.get_historical_weather(lat, lon, target_date)\n                    self.root.after(0, lambda: self.display_historical_data(historical_data, date_str))\n                    \n                except Exception as e:\n                    self.root.after(0, lambda: messagebox.showerror(\"Error\", f\"Failed to load historical data: {e}\"))\n                    self.root.after(0, lambda: self.update_status(\"Ready\"))\n                    \n            threading.Thread(target=load_historical, daemon=True).start()\n            \n        except ValueError:\n            messagebox.showerror(\"Error\", \"Invalid date format. Please use YYYY-MM-DD.\")\n            \n    def display_historical_data(self, data, date_str):\n        \"\"\"Display historical weather data.\"\"\"\n        # Clear existing display\n        for widget in self.historical_display.winfo_children():\n            widget.destroy()\n            \n        ttk.Label(self.historical_display, text=f\"Historical Weather for {date_str}\", style='Header.TLabel').grid(row=0, column=0, pady=10)\n        \n        if 'data' in data and data['data']:\n            hist_data = data['data'][0]\n            \n            info_frame = ttk.Frame(self.historical_display, style='Card.TFrame')\n            info_frame.grid(row=1, column=0, sticky='ew', padx=10, pady=10)\n            self.historical_display.grid_columnconfigure(0, weight=1)\n            \n            # Display historical weather information\n            ttk.Label(info_frame, text=f\"Temperature: {hist_data.get('temp', 'N/A')}¬∞C\", style='Data.TLabel').grid(row=0, column=0, sticky='w', pady=2)\n            ttk.Label(info_frame, text=f\"Humidity: {hist_data.get('humidity', 'N/A')}%\", style='Data.TLabel').grid(row=1, column=0, sticky='w', pady=2)\n            ttk.Label(info_frame, text=f\"Pressure: {hist_data.get('pressure', 'N/A')} hPa\", style='Data.TLabel').grid(row=2, column=0, sticky='w', pady=2)\n            \n        else:\n            ttk.Label(self.historical_display, text=\"Historical data structure available\", style='Data.TLabel').grid(row=1, column=0, pady=10)\n            \n        self.update_status(f\"Historical data loaded for {date_str}\")\n        \n    def generate_statistics(self):\n        \"\"\"Generate statistical weather analysis.\"\"\"\n        if not self.current_location:\n            messagebox.showerror(\"Error\", \"Please select a location first.\")\n            return\n            \n        try:\n            start_date = datetime.strptime(self.stats_start_var.get(), '%Y-%m-%d')\n            end_date = datetime.strptime(self.stats_end_var.get(), '%Y-%m-%d')\n            \n            self.update_status(\"Generating statistical analysis...\")\n            \n            def generate_stats():\n                try:\n                    lat = self.current_location['lat']\n                    lon = self.current_location['lon']\n                    \n                    stats_data = self.weather_api.get_statistical_weather(lat, lon, start_date, end_date)\n                    self.root.after(0, lambda: self.display_statistics(stats_data, start_date, end_date))\n                    \n                except Exception as e:\n                    self.root.after(0, lambda: messagebox.showerror(\"Error\", f\"Failed to generate statistics: {e}\"))\n                    self.root.after(0, lambda: self.update_status(\"Ready\"))\n                    \n            threading.Thread(target=generate_stats, daemon=True).start()\n            \n        except ValueError:\n            messagebox.showerror(\"Error\", \"Invalid date format. Please use YYYY-MM-DD.\")\n            \n    def display_statistics(self, data, start_date, end_date):\n        \"\"\"Display statistical analysis results.\"\"\"\n        # Clear existing display\n        for widget in self.stats_display.winfo_children():\n            widget.destroy()\n            \n        period_str = f\"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}\"\n        ttk.Label(self.stats_display, text=f\"Statistical Analysis: {period_str}\", style='Header.TLabel').grid(row=0, column=0, pady=10)\n        \n        result_frame = ttk.Frame(self.stats_display, style='Card.TFrame')\n        result_frame.grid(row=1, column=0, sticky='ew', padx=10, pady=10)\n        self.stats_display.grid_columnconfigure(0, weight=1)\n        \n        ttk.Label(result_frame, text=\"‚úÖ Statistical analysis completed\", style='Success.TLabel').grid(row=0, column=0, pady=5)\n        ttk.Label(result_frame, text=\"üìä Analysis data structure available\", style='Data.TLabel').grid(row=1, column=0, pady=5)\n        \n        self.update_status(f\"Statistical analysis completed for {period_str}\")\n        \n    def calculate_accumulation(self):\n        \"\"\"Calculate accumulated parameters.\"\"\"\n        if not self.current_location:\n            messagebox.showerror(\"Error\", \"Please select a location first.\")\n            return\n            \n        try:\n            temp_threshold = float(self.temp_threshold_var.get())\n            precip_threshold = float(self.precip_threshold_var.get())\n            \n            start_date = datetime.now() - timedelta(days=7)\n            end_date = datetime.now()\n            \n            self.update_status(\"Calculating accumulated parameters...\")\n            \n            def calculate_accum():\n                try:\n                    lat = self.current_location['lat']\n                    lon = self.current_location['lon']\n                    \n                    # Calculate temperature accumulation\n                    temp_accum = self.weather_api.get_accumulated_temperature(lat, lon, temp_threshold, start_date, end_date)\n                    \n                    # Calculate precipitation accumulation\n                    precip_accum = self.weather_api.get_accumulated_precipitation(lat, lon, precip_threshold, start_date, end_date)\n                    \n                    self.root.after(0, lambda: self.display_accumulation_results(temp_accum, precip_accum, temp_threshold, precip_threshold))\n                    \n                except Exception as e:\n                    self.root.after(0, lambda: messagebox.showerror(\"Error\", f\"Failed to calculate accumulation: {e}\"))\n                    self.root.after(0, lambda: self.update_status(\"Ready\"))\n                    \n            threading.Thread(target=calculate_accum, daemon=True).start()\n            \n        except ValueError:\n            messagebox.showerror(\"Error\", \"Invalid threshold values. Please enter numbers.\")\n            \n    def display_accumulation_results(self, temp_data, precip_data, temp_threshold, precip_threshold):\n        \"\"\"Display accumulation calculation results.\"\"\"\n        # Clear existing display\n        for widget in self.stats_display.winfo_children():\n            widget.destroy()\n            \n        ttk.Label(self.stats_display, text=\"Accumulated Parameters (Last 7 Days)\", style='Header.TLabel').grid(row=0, column=0, pady=10)\n        \n        result_frame = ttk.Frame(self.stats_display, style='Card.TFrame')\n        result_frame.grid(row=1, column=0, sticky='ew', padx=10, pady=10)\n        self.stats_display.grid_columnconfigure(0, weight=1)\n        \n        ttk.Label(result_frame, text=f\"üå°Ô∏è Temperature accumulation (>{temp_threshold}¬∞C):\", style='Header.TLabel').grid(row=0, column=0, sticky='w', pady=5)\n        ttk.Label(result_frame, text=\"‚úÖ Calculation completed\", style='Success.TLabel').grid(row=1, column=0, sticky='w', pady=2)\n        \n        ttk.Label(result_frame, text=f\"üíß Precipitation accumulation (>{precip_threshold}mm):\", style='Header.TLabel').grid(row=2, column=0, sticky='w', pady=5)\n        ttk.Label(result_frame, text=\"‚úÖ Calculation completed\", style='Success.TLabel').grid(row=3, column=0, sticky='w', pady=2)\n        \n        self.update_status(\"Accumulation parameters calculated\")\n        \n    def open_weather_map(self):\n        \"\"\"Open interactive weather map in browser.\"\"\"\n        if not self.current_location:\n            messagebox.showerror(\"Error\", \"Please select a location first.\")\n            return\n            \n        lat = self.current_location['lat']\n        lon = self.current_location['lon']\n        layer = self.selected_layer.get()\n        \n        # OpenWeatherMap interactive map URL\n        map_url = f\"https://openweathermap.org/weathermap?basemap=map&cities=true&layer={layer}&lat={lat}&lon={lon}&zoom=10\"\n        \n        try:\n            webbrowser.open(map_url)\n            self.update_status(f\"Opened {layer} weather map for {self.current_location['name']}\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to open map: {e}\")\n            \n    def show_api_info(self):\n        \"\"\"Show comprehensive API information.\"\"\"\n        api_info = self.weather_api.get_api_usage_info()\n        \n        info_window = tk.Toplevel(self.root)\n        info_window.title(\"Student Pack API Information\")\n        info_window.geometry(\"600x500\")\n        info_window.configure(bg='#1e2328')\n        \n        # Create scrollable text widget\n        text_frame = ttk.Frame(info_window)\n        text_frame.pack(fill='both', expand=True, padx=10, pady=10)\n        \n        scrollbar = ttk.Scrollbar(text_frame)\n        scrollbar.pack(side='right', fill='y')\n        \n        text_widget = tk.Text(text_frame, wrap='word', yscrollcommand=scrollbar.set,\n                             bg='#2d3136', fg='#c9d1d9', font=('Segoe UI', 10),\n                             relief='flat', borderwidth=5)\n        text_widget.pack(side='left', fill='both', expand=True)\n        \n        scrollbar.config(command=text_widget.yview)\n        \n        # Format API information\n        info_text = f\"\"\"\nüéì OpenWeatherMap Student Pack Information\n\nüìã Subscription Details:\n   ‚Ä¢ Plan: {api_info['subscription']['subscription_plan']}\n   ‚Ä¢ Pricing: {api_info['subscription']['pricing']}\n   ‚Ä¢ Type: {api_info['subscription']['subscription_type']}\n\n‚ö° Rate Limits:\n   ‚Ä¢ Current/Forecast: {api_info['rate_limits']['current_forecast']}\n   ‚Ä¢ Monthly Total: {api_info['rate_limits']['monthly_total']} \n   ‚Ä¢ Historical Daily: {api_info['rate_limits']['historical_daily']}\n\nüåü Available Features:\n\"\"\"\n        \n        for benefit in api_info['student_pack_benefits']:\n            info_text += f\"   ‚úÖ {benefit}\\n\"\n            \n        info_text += f\"\"\"\n\nüîó API Endpoints:\n   ‚Ä¢ Current Weather: {api_info['endpoints']['current_weather']}\n   ‚Ä¢ One Call API: {api_info['endpoints']['forecast_onecall']}\n   ‚Ä¢ Historical: {api_info['endpoints']['historical']}\n   ‚Ä¢ Geocoding: {api_info['endpoints']['geocoding']}\n   ‚Ä¢ Air Pollution: {api_info['endpoints']['air_pollution']}\n   ‚Ä¢ Weather Maps: {api_info['endpoints']['weather_maps']}\n   ‚Ä¢ Statistics: {api_info['endpoints']['statistics']}\n\nüìö Documentation & Support:\n   ‚Ä¢ Documentation: {api_info['subscription_info']['documentation']}\n   ‚Ä¢ Support Email: {api_info['subscription_info']['support_email']}\n   ‚Ä¢ Subscription URL: {api_info['subscription_info']['subscription_url']}\n\nüîë API Key: {api_info['api_key']}\n\nüéØ This application demonstrates all Student Pack features including:\n   ‚Ä¢ Real-time weather data\n   ‚Ä¢ Extended forecasts (4-day hourly, 16-day daily)\n   ‚Ä¢ Historical data (1 year archive)\n   ‚Ä¢ Air pollution monitoring\n   ‚Ä¢ Interactive weather maps (15 layers)\n   ‚Ä¢ Statistical analysis\n   ‚Ä¢ Accumulated parameters\n   ‚Ä¢ Advanced geocoding\n\"\"\"\n        \n        text_widget.insert('1.0', info_text)\n        text_widget.config(state='disabled')\n\ndef main():\n    \"\"\"Main application entry point.\"\"\"\n    root = tk.Tk()\n    app = StudentPackWeatherGUI(root)\n    \n    try:\n        root.mainloop()\n    except KeyboardInterrupt:\n        print(\"\\nApplication terminated by user.\")\n    except Exception as e:\n        print(f\"Application error: {e}\")\n\nif __name__ == \"__main__\":\n    main()"
